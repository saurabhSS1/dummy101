import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.servlet.http.HttpSession;

public class MyServiceTest {

    @Mock
    private HttpSession session;

    @Mock
    private UploadConfigurationService uploadConfigurationService;

    @InjectMocks
    private MyService myService; // Assuming the process method is part of MyService

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testProcessWithAPI() throws Exception {
        // Step 1: Prepare mock JSON data
        String jsonData = "[{\"merchantId\":\"123\", \"name\":\"Test Merchant\"}]";
        InputStream inputStream = new ByteArrayInputStream(jsonData.getBytes());

        // Step 2: Mock the API call setting
        when(uploadConfigurationService.getConfigValue("API")).thenReturn("Y");

        // Step 3: Mock session attributes
        when(session.getAttribute("TOTAL_PROCESSES")).thenReturn(0);
        doNothing().when(session).setAttribute(eq("TOTAL_PROCESSES"), anyInt());
        doNothing().when(session).setAttribute(eq("PROCESS_RESPONSE"), anyString());

        // Step 4: Mock saveApplicationByAPI method
        String apiResponse = "API call successful";
        doReturn(apiResponse).when(myService).saveApplicationByAPI(anyString());

        // Step 5: Execute the process method
        String result = myService.process(inputStream);

        // Step 6: Verify the method calls
        verify(session, times(1)).setAttribute("TOTAL_PROCESSES", 1);
        verify(session, times(1)).setAttribute("PROCESS_RESPONSE", "JSON file Processed. Please see log for details: \n" + apiResponse);

        // Step 7: Assert the return value
        assertEquals(apiResponse, result);
    }

    @Test
    public void testProcessWithoutAPI() throws Exception {
        // Step 1: Prepare mock JSON data
        String jsonData = "[{\"merchantId\":\"123\", \"name\":\"Test Merchant\"}]";
        InputStream inputStream = new ByteArrayInputStream(jsonData.getBytes());

        // Step 2: Mock the API call setting (API is off)
        when(uploadConfigurationService.getConfigValue("API")).thenReturn("N");

        // Step 3: Mock session attributes
        when(session.getAttribute("TOTAL_PROCESSES")).thenReturn(0);
        doNothing().when(session).setAttribute(eq("TOTAL_PROCESSES"), anyInt());
        doNothing().when(session).setAttribute(eq("PROCESS_RESPONSE"), anyString());

        // Step 4: Mock other method calls (local processing)
        doNothing().when(myService).mapSchemesToIndividualSchemeFlag(any(MerchantInformation[].class));
        doNothing().when(myService).validateJsonApplicationData(any(MerchantInformation[].class));
        doNothing().when(myService).saveApplication(any(MerchantInformation[].class));

        // Step 5: Execute the process method
        String result = myService.process(inputStream);

        // Step 6: Verify the method calls for local processing
        verify(myService, times(1)).mapSchemesToIndividualSchemeFlag(any(MerchantInformation[].class));
        verify(myService, times(1)).validateJsonApplicationData(any(MerchantInformation[].class));
        verify(myService, times(1)).saveApplication(any(MerchantInformation[].class));

        // Verify session attribute updates
        verify(session, times(1)).setAttribute("PROCESS_RESPONSE", "JSON Processed successfully!");

        // Step 7: Assert the return value (empty because we don't modify the data string in local processing)
        assertEquals("", result);
    }
}
