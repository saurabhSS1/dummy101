import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.ui.Model;

@RunWith(MockitoJUnitRunner.class)
public class FileUploadControllerTest {

    @Mock
    private IUploadConfigurationService uploadConfigurationService;

    @Mock
    private AbstractFileUploadService fileuploadService;

    @Mock
    private IServiceFlow serviceFlow;

    @Mock
    private IRestService restService;

    @Mock
    private HttpSession session;

    @Mock
    private IPayzoneService payzoneService;

    @Mock
    private ISfdcObjectService sfdc0bjectService;

    @Mock
    private HttpServletRequest request;

    @Mock
    private Model model;

    @InjectMocks
    private FileUploadController fileUploadController;

    @Before
    public void setUp() {
        when(session.getAttribute("IS_EXCEPTION")).thenReturn("N");
    }

    @Test
    public void testUploadFile_Success() throws Exception {
        // Arrange
        MultipartFile file = new MockMultipartFile("file", "test.txt", "text/plain", "test content".getBytes());

        UploaderResponse mockUploaderResponse = new UploaderResponse();
        mockUploaderResponse.setResponseCode(UploaderResponseCode.OK);

        when(fileuploadService.saveFileDataInDB(any(MultipartFile.class))).thenReturn(mockUploaderResponse);
        when(uploadConfigurationService.getConfigValue("API")).thenReturn("N");

        // Act
        ResponseEntity<UploaderResponse> responseEntity = fileUploadController.uploadFile(file, request, model);

        // Assert
        assertNotNull(responseEntity);
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        verify(serviceFlow, times(1)).process();
    }

    @Test
    public void testUploadFile_InternalServerError() throws Exception {
        // Arrange
        MultipartFile file = new MockMultipartFile("file", "test.txt", "text/plain", "test content".getBytes());

        UploaderResponse mockUploaderResponse = new UploaderResponse();
        mockUploaderResponse.setResponseCode(UploaderResponseCode.INTERNAL_SERVER_ERROR);

        when(fileuploadService.saveFileDataInDB(any(MultipartFile.class))).thenReturn(mockUploaderResponse);
        when(uploadConfigurationService.getConfigValue("API")).thenReturn("N");

        // Act
        ResponseEntity<UploaderResponse> responseEntity = fileUploadController.uploadFile(file, request, model);

        // Assert
        assertNotNull(responseEntity);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());
        verify(serviceFlow, times(0)).process();
    }

    @Test
    public void testUploadFile_InvalidLogin() throws Exception {
        // Arrange
        MultipartFile file = new MockMultipartFile("file", "test.txt", "text/plain", "test content".getBytes());

        // Simulate login failure
        when(session.getAttribute("IS_EXCEPTION")).thenReturn("Y");

        // Act
        ResponseEntity<UploaderResponse> responseEntity = fileUploadController.uploadFile(file, request, model);

        // Assert
        assertNull(responseEntity);
        verify(serviceFlow, times(0)).process();
        verify(session).setAttribute("PROCESS_RESPONSE", "Invalid login Credentials");
    }

    @Test
    public void testUploadFile_Exception() throws Exception {
        // Arrange
        MultipartFile file = new MockMultipartFile("file", "test.txt", "text/plain", "test content".getBytes());

        when(fileuploadService.saveFileDataInDB(any(MultipartFile.class))).thenThrow(new RuntimeException("Error"));

        // Act
        ResponseEntity<UploaderResponse> responseEntity = fileUploadController.uploadFile(file, request, model);

        // Assert
        assertNull(responseEntity);
        verify(session).setAttribute(eq("PROCESS_RESPONSE"), anyString());
        verify(model).addAttribute(eq("message"), anyString());
    }
}
