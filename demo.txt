import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.servlet.http.HttpSession;

@ExtendWith(MockitoExtension.class)
public class RestServiceTest {

    @Mock
    private HttpSession session;

    @Mock
    private HttpClient httpClient;

    @Mock
    private HttpUtility httpUtility;

    @Mock
    private HttpResponse response;

    @Mock
    private StatusLine statusLine;

    @Mock
    private HttpEntity entity;

    @InjectMocks
    private RestService restService;

    @Test
    public void testFetchData_SuccessResponse_ReturnsResultForResourcetype() throws Exception {
        String queryId = "resourcetype";
        String queryData = "validQueryData";
        String baseUri = "http://example.com";
        BasicHeader outHeader = new BasicHeader("headerName", "headerValue");
        String expectedResult = "Id1:SObjectType|";

        // Mock session attributes
        when(session.getAttribute("BASE_URL")).thenReturn(baseUri);
        when(session.getAttribute("OUT_HEADER")).thenReturn(outHeader);

        // Mock HttpGet creation
        HttpGet mockHttpGet = new HttpGet(baseUri + "?" + queryData);
        when(httpUtility.getHttpGet(queryData, baseUri, outHeader, Constants.PRINT_HEADER)).thenReturn(mockHttpGet);

        // Mock HttpClient to return the mocked response
        when(httpClient.execute(mockHttpGet)).thenReturn(response);

        // Mock HttpResponse and StatusLine
        when(response.getStatusLine()).thenReturn(statusLine);
        when(statusLine.getStatusCode()).thenReturn(200);

        // Mock the response entity and its content
        String jsonResponse = "{\"totalSize\": 1, \"records\": [{\"Id\": \"Id1\", \"SobjectType\": \"SObjectType\"}]}";
        InputStream inputStream = new ByteArrayInputStream(jsonResponse.getBytes());
        when(entity.getContent()).thenReturn(inputStream);
        when(response.getEntity()).thenReturn(entity);

        // Debugging to see if the mock is correct
        assertNotNull(response, "HttpResponse should not be null");
        assertNotNull(response.getStatusLine(), "StatusLine should not be null");
        assertEquals(200, response.getStatusLine().getStatusCode(), "Status code should be 200");

        // Act
        String result = restService.fetchData(queryId, queryData);

        // Debugging result
        System.out.println("Result: " + result);
        assertNotNull(result, "Result should not be null");

        // Assert
        assertEquals(expectedResult, result);
    }
}
